************************************************************************************************************************
*                The java.util.regex package primarily consists of the following three classes:                        *
************************************************************************************************************************
1.Pattern Class: A Pattern object is a compiled representation of a regular expression.
2.Matcher Class: A Matcher object is the engine that interprets the pattern and performs match operations against an input string
3.PatternSyntaxException: A PatternSyntaxException object is an unchecked exception that indicates a syntax error in a regular expression pattern.





************************************************************************************************************************
*                                                    Capturing Groups                                                  *
************************************************************************************************************************
Capturing groups are a way to treat multiple characters as a single unit.
For Example: Capturing groups are numbered by counting their opening parentheses from left to right. In the expression ((A)(B(C))), for example, there are four such groups:

    a. ((A)(B(C)))
    b. (A)
    c. (B(C)
    d. (C)

To find out how many groups are present in the expression, call the groupCount method on a matcher object.



************************************************************************************************************************
*                                                 Regular Expression Syntax                                            *
************************************************************************************************************************

^       :   Matches beginning of line.
$       :   Matches end of line.
.       :   Matches any single character except newline. Using m option allows it to match newline as well.
*       :   Matches 0 or more occurrences of preceding expression.
+       :   Matches 1 or more occurrences of preceding expression.
?       :   Matches 0 or 1 occurrence of preceding expression.
[...]   :   Matches any single character in brackets.
[^...]  :   Matches any single character not in brackets
{ n}    :   Matches exactly n number of occurrences of preceding expression.
{ n,}   :   Matches n or more occurrences of preceding expression.
{ n, m} :   Matches at least n and at most m occurrences of preceding expression.
a|b     :   Matches either a or b.
()      :   Groups regular expressions and remembers matched text.
(?: re) :   Groups regular expressions without remembering matched text.
(?> re) :   Matches independent pattern without backtracking.
\A      :   Beginning of entire string
\b      :   Matches word boundaries when outside brackets.
\B      :   Matches nonword boundaries.
\d      :   Matches digits. Equivalent to [0-9].
\D      :   Matches nondigits.
\E      :   Ends quoting begun with \Q
\G      :   Matches point where last match finished.
\n      :   Matches newlines
\Q      :   Escape (quote) all characters up to \E
\s      :   Matches whitespace.
\S      :   Matches nonwhitespace.
\t      :   Matches tabs
\w      :   Matches word characters.
\W      :   Matches nonword characters.
\z      :   End of entire string
\Z      :   End of entire string except allowable final line terminator.





************************************************************************************************************************
*                                                 Methods with Description                                             *
************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------
public int start()              :   Returns the start index of the previous match.
public int start(int group)     :   Returns the start index of the subsequence captured by the given group during the previous match operation.
public int end()                :   Returns the offset after the last character matched.
public int end(int group)       :   Returns the offset after the last character of the subsequence captured by the given group during the previous match operation.
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
public boolean lookingAt()      :   Attempts to match the input sequence, starting at the beginning of the region, against the pattern.
public boolean find()           :   Attempts to find the next subsequence of the input sequence that matches the pattern.
public boolean find(int start)  :   Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index.
public boolean matches()        :   Attempts to match the entire region against the pattern.
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
public Matcher appendReplacement(StringBuffer sb, String replacement)   :   Implements a non-terminal append-and-replace step.
public StringBuffer appendTail(StringBuffer sb)                         :   Implements a terminal append-and-replace step.
public String replaceAll(String replacement)                            :   Replaces every subsequence of the input sequence that matches the pattern with the given replacement string.
public String replaceFirst(String replacement)                          :   Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string.
public static String quoteReplacement(String s)                         :   Returns a literal replacement String for the specified String. This method produces a String that will work as a literal replacement s in the appendReplacement method of the Matcher class.
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
public String getDescription()  :   Retrieves the description of the error.
public int getIndex()           :   Retrieves the error index.
public String getPattern()      :   Retrieves the erroneous regular expression pattern.
public String getMessage()      :   Returns a multi-line string containing the description of the syntax error and its index, the erroneous regular expression pattern, and a visual indication of the error index within the pattern.
------------------------------------------------------------------------------------------------------------------------

